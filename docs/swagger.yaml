definitions:
  requestengine.Pairs:
    properties:
      blockNumber:
        type: string
      pairsStruct:
        items:
          $ref: '#/definitions/requestengine.ProcessedPair'
        type: array
    type: object
  requestengine.ProcessedPair:
    properties:
      address:
        type: string
      atob:
        type: boolean
      cdecimals:
        type: integer
      clpaddress:
        type: string
      decimals:
        type: integer
      lpPrice:
        type: string
      price1:
        type: string
      price2:
        type: string
      ratio:
        type: string
      reserve1:
        type: string
      reserve2:
        type: string
      stable:
        type: boolean
      symbol:
        type: string
      token0:
        $ref: '#/definitions/requestengine.Token'
      token1:
        $ref: '#/definitions/requestengine.Token'
      totalSupply:
        type: string
      tvl:
        type: string
    type: object
  requestengine.Token:
    properties:
      address:
        type: string
      chainId:
        type: integer
      decimals:
        type: integer
      logoURI:
        type: string
      name:
        type: string
      symbol:
        type: string
    type: object
info:
  contact: {}
paths:
  /csr:
    get:
      consumes:
      - application/json
      description: return json list of CSRs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Query CSR list
  /csr/{id}:
    get:
      consumes:
      - application/json
      description: return json object of CSR
      parameters:
      - description: CSR nft id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Query CSR by id
  /dex/pairs:
    get:
      consumes:
      - application/json
      description: return json array of all pairs in Canto dex
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/requestengine.Pairs'
      summary: Query all pairs in Canto dex
  /dex/pairs/{address}:
    get:
      consumes:
      - application/json
      description: return json array of all pairs in Canto dex
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/requestengine.Pairs'
      summary: Query a pair by address
  /gov/proposals:
    get:
      consumes:
      - application/json
      description: return json list of proposals
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Query proposal list
  /gov/proposals/{id}:
    get:
      consumes:
      - application/json
      description: return json object of proposal
      parameters:
      - description: proposal id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Query proposal by id
  /lending/ctokens:
    get:
      consumes:
      - application/json
      description: return json array of all pairs in CLM
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Query all cTokens in CLM
  /lending/ctokens/{address}:
    get:
      consumes:
      - application/json
      description: return json object of cToken
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Query cToken by address
  /staking/apr:
    get:
      consumes:
      - application/json
      description: return string of current staking APR
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Query current staking APR
  /staking/validators:
    get:
      consumes:
      - application/json
      description: return json list of validators
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Query validator list
  /staking/validators/{address}:
    get:
      consumes:
      - application/json
      description: return json object of validator
      parameters:
      - description: validator address
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Query validator by address
swagger: "2.0"
